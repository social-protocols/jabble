generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// view InformedTallyQueryResult {
//   id    Int    @unique
//   email String
//   name  String
//   bio   String
// }

view CurrentInformedTally {
  tagId                      Int @map("tag_id")
  postId                     Int @map("post_id")
  noteId                     Int @map("note_id")
  countGivenShownThisNote    Int @map("count_given_shown_this_note")
  totalGivenShownThisNote    Int @map("total_given_shown_this_note")
  countGivenNotShownThisNote Int @map("count_given_not_shown_this_note")
  totalGivenNotShownThisNote Int @map("total_given_not_shown_this_note")
  // count_for_note Int
  // total_for_note Int

  @@unique([tagId, postId, noteId])
  @@map("current_informed_tally")
}

view CurrentTally {
  tagId  Int @map("tag_id")
  postId Int @map("post_id")
  count  Int @map("count")
  total  Int @map("total")

  @@unique([tagId, postId])
  @@map("current_tally")
}

model User {
  idInt    Int     @id @default(autoincrement())
  id       String  @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  image    UserImage?
  password Password?
  sessions Session[]

  posts       Post[]
  voteHistory VoteHistory[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Post {
  id        Int      @id @default(autoincrement())
  parentId  Int?     @map("parent_id")
  content   String
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  parent    Post?    @relation("post_notes", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notes     Post[]   @relation("post_notes")
  user      User     @relation(fields: [authorId], references: [idInt], onDelete: NoAction, onUpdate: NoAction)

  @@map("post")
}

model Tag {
  id          Int           @id @default(autoincrement())
  tag         String        @unique
  VoteHistory VoteHistory[]

  @@map("tag")
}

model VoteHistory {
  rowid     Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tagId     Int      @map("tag_id")
  postId    Int      @map("post_id")
  noteId    Int?     @map("note_id")
  direction Int
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [idInt], onDelete: NoAction, onUpdate: NoAction)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("vote_history")
}

model CumulativeStats {
  tagId       Int    @map("tag_id")
  postId      Int    @map("post_id")
  // updatedAt DateTime
  attention   Int
  uniqueUsers String @map("unique_users")

  @@unique([postId])
  @@map("cumulative_stats")
}

model ExplorationStats {
  rank  Int
  views Int
  votes Int

  @@unique([rank])
  @@map("exploration_stats")
}
