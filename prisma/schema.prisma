generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  username     String         @unique
  name         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  password     Password?
  sessions     Session[]
  posts        posts[]
  vote_history vote_history[]
}

model Password {
  hash   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model posts {
  id                                       Int            @id @default(autoincrement())
  parent_id                                Int?
  content                                  String
  question_id                              Int?
  author_id                                Int
  created                                  DateTime       @default(now())
  User                                     User           @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts_posts_question_idToposts           posts?         @relation("posts_question_idToposts", fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_posts_posts_question_idToposts     posts[]        @relation("posts_question_idToposts")
  posts_posts_parent_idToposts             posts?         @relation("posts_parent_idToposts", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_posts_posts_parent_idToposts       posts[]        @relation("posts_parent_idToposts")
  vote_history_vote_history_note_idToposts vote_history[] @relation("vote_history_note_idToposts")
  vote_history_vote_history_post_idToposts vote_history[] @relation("vote_history_post_idToposts")
}

model tags {
  id           Int            @id @default(autoincrement())
  tag          String         @unique(map: "sqlite_autoindex_tags_1")
  vote_history vote_history[]
}

model vote_history {
  rowid                             Int      @id @default(autoincrement())
  user_id                           Int
  tag_id                            Int
  post_id                           Int
  note_id                           Int?
  direction                         Int
  created                           DateTime @default(now())
  posts_vote_history_note_idToposts posts?   @relation("vote_history_note_idToposts", fields: [note_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts_vote_history_post_idToposts posts    @relation("vote_history_post_idToposts", fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags                              tags     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                              User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

