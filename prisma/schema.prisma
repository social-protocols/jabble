generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  username    String        @unique
  name        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  password    Password?
  sessions    Session[]
  posts        Post[]
  voteHistory VoteHistory[]
}

model Password {
  hash   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Post {
  id       Int      @id @default(autoincrement())
  parentId Int?
  content  String
  // questionId                           Int?
  authorId Int
  created  DateTime @default(now())
  user     User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // Post_Post_questionIDToPost           Post?         @relation("Post_questionIDToPost", fields: [questionID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // other_Post_Post_questionIDToPost     Post[]        @relation("Post_questionIDToPost")
  parent   Post?    @relation("post_notes", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notes    Post[]   @relation("post_notes")
  // voteHistory VoteHistory[] @relation("VoteHistory_noteIdToPost")
  // VoteHistory_VoteHistory_postIdToPost VoteHistory[] @relation("VoteHistory_postIdToPost")
}

model Tag {
  id          Int           @id @default(autoincrement())
  tag         String        @unique(map: "sqlite_autoindex_tags_1")
  VoteHistory VoteHistory[]
}

model VoteHistory {
  rowid     Int      @id @default(autoincrement())
  userId    Int
  tagId     Int
  postId    Int
  noteId    Int?
  direction Int
  created   DateTime @default(now())
  // Post_VoteHistory_noteIdToPost Post?    @relation("VoteHistory_noteIdToPost", fields: [noteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // Post_VoteHistory_postIdToPost Post     @relation("VoteHistory_postIdToPost", fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
